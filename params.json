{"name":"Groovy-vfs","tagline":"A DSL for Groovy on top of Apache VFS2","body":"# Groovy VFS\r\n\r\nA DSL for Groovy to wrap around the Apache VFS libraries.\r\n\r\nIf you like it, then tweet about it using ```#groovyvfs``` as the hashtag.\r\n\r\n## Groovy Library\r\n\r\n\r\n[ ![Download](https://api.bintray.com/packages/ysb33r/grysb33r/groovy-vfs/images/download.png) ](https://bintray.com/ysb33r/grysb33r/groovy-vfs/_latestVersion)\r\n\r\n```groovy\r\n\r\n@Grapes([\r\n\t@Grab( 'org.ysb33r.groovy:groovy-vfs:0.5' ),\r\n\t@Grab( 'commons-net:commons-net:3.+' ), // If you want to use ftp \r\n    @Grab( 'commons-httpclient:commons-httpclient:3.1'), // If you want http/https\r\n    @Grab( 'com.jcraft:jsch:0.1.48' ) // If you want sftp\r\n])\r\nimport org.ysb33r.groovy.dsl.vfs.VFS\r\n\r\ndef vfs = new VFS()\r\n \r\n// Simple copy operation\r\nvfs.cp 'ftp://foo.example/myfile', 'sftp://bar.example/yourfile'\r\n \r\n// Utilising the DSL\r\nvfs {\r\n   \r\n    // Copy file from one site to anther using two different protocols\r\n    cp 'http://first.example/myfile', 'sftp://second.example/yourfile'\r\n \r\n    // Not implemented yet - move file between two sites using different protocols\r\n    mv 'sftp://second.example/yourfile', 'ftp://third.example/theirfile'\r\n \r\n    // Lists all files on a remote site\r\n    ls ('http://first.example') {\r\n        println it.name\r\n    }\r\n  \r\n    // Streams the output\r\n    cat ('http://first.example/myfile') { strm->\r\n        println strm.text\r\n    }\r\n \r\n    // Create a new folder on a remote site\r\n    mkdir 'sftp://second.example/my/new/folder'\r\n    \r\n    // Change default options via property Map\r\n    options 'vfs.ftp.passiveMode' : true\r\n \r\n    // Change default options DSL style\r\n    options {\r\n        ftp {\r\n            passiveMode true\r\n        }\r\n    }\r\n \r\n    // Use options on a per URL basis\r\n    cp 'ftp://first.example/myfile?vfs.ftp.passiveMode=1', 'sftp://second.example/yourfile?vfs.sftp.compression=zlib'\r\n    \r\n    // Download a compressed archive and unpack to local directory\r\n    cp 'tbz2:ftp:/first.example/myFiles.tar.bz2\", new File( '../unpack-here' ), recursive:true\r\n     \r\n}\r\n```\r\n\r\n\r\n## Gradle plugin\r\n\r\n\r\n[ ![Download](https://api.bintray.com/packages/ysb33r/grysb33r/vfs-gradle-plugin/images/download.png) ](https://bintray.com/ysb33r/grysb33r/vfs-gradle-plugin/_latestVersion)\r\n\r\nIt is now possible to use this in Gradle as an extension to the project class.\r\nThe interface is very experimental and may change without much warning in future\r\nreleases of this plugin.\r\n\r\n```groovy\r\n\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n        mavenCentral()\r\n      }\r\n      dependencies {\r\n        classpath 'org.ysb33r.gradle:vfs-gradle-plugin:0.5.1'\r\n        classpath 'commons-net:commons-net:3.+'  // If you want to use ftp \r\n        classpath 'commons-httpclient:commons-httpclient:3.1' // If you want http/https\r\n        classpath 'com.jcraft:jsch:0.1.48'  // If you want sftp\r\n      }\r\n}\r\napply plugin : 'org.ysb33r.vfs'\r\n\r\n// Create a VFS task\r\ntask copyReadme << { \r\n  vfs {\r\n    cp 'https://raw.github.com/ysb33r/groovy-vfs/master/README.md', new File(\"${buildDir}/tmp/README.md\")\r\n  }\r\n}\r\n\r\n// it is also possible to update global options for vfs\r\nvfs {\r\n  options {\r\n    http {\r\n      maxTotalConnections 4\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf you want to see what VFS is going run gradle with ```--debug```\r\n\r\n## Adding extra plugins\r\n\r\n\r\nFrom v1.0 onwards additional plugins can be loaded via a new ```extend``` block. For more details see this gist:\r\nhttps://gist.github.com/ysb33r/9916940\r\n\r\n\r\n## SMB provider\r\n[ ![Download](https://api.bintray.com/packages/ysb33r/grysb33r/groovy-vfs-smb-provider/images/download.png) ](https://bintray.com/ysb33r/grysb33r/groovy-vfs-smb-provider/_latestVersion)\r\n\r\n\r\nA provider for accessing SMB shares is now avavilable. The plugin must be loaded separately.\r\n\r\n```groovy\r\n@Grab( 'org.ysb33r.groovy:groovy-vfs-smb-provider:1.0-beta1' ),\r\n@Grab( 'jcifs:jcifs:1.3.17' ),\r\n\r\nvfs {\r\n  extend {\r\n    provider className: 'org.ysb33r.groovy.vfsplugin.smb.SmbFileProvider', schemes: ['smb','cifs']\r\n  }\r\n\r\n  cp 'smb://someserver/share/dir/file', new File('localfile.txt)\r\n}\r\n```\r\n\r\n*NOTE:* when embedding windows credentials in the URL use ```%5C``` in place of backslash i.e.\r\n\r\n```\r\n  smb://DOMAIN%5cUSERNAME:PASSWORD@HOSTNAME/SHARE/PATH\r\n```\r\n\r\n## S3 provider (EXPERIMENTAL)\r\n[ ![Download](https://api.bintray.com/packages/ysb33r/grysb33r/groovy-vfs-cloud-core/images/download.png) ](https://bintray.com/ysb33r/grysb33r/groovy-vfs-cloud-core/_latestVersion)\r\n\r\n\r\nA provider for accessing S3 shares is now available and will be fully supported in future version. The plugin\r\nmust be loaded separately.\r\n\r\n```groovy\r\n@Grab( 'org.ysb33r.groovy:groovy-vfs-cloud-core:0.1-beta1' ),\r\n@Grab( 'org.apache.jclouds:jclouds-all:1.7.2' )\r\n@Grab( 'org.apache.jclouds.driver:jclouds-jsch:1.7.2' )\r\n@Grab( 'org.apache.jclouds.provider:aws-s3:1.7.2'\r\nvfs {\r\n  extend {\r\n    provider className: 'org.ysb33r.groovy.vfsplugin.cloud.s3.S3FileProvider', schemes: ['s3']\r\n  }\r\n\r\n  cp 'smb://id:key@bucket/dir/file', new File('localfile.txt)\r\n}\r\n```\r\n\r\n*NOTE:* Although S# does not actually support folders, this is simulated trhough the use of folder names containing `/`\r\ncharacters.\r\n\r\n\r\n\r\n## Command-line utility\r\n[ ![Download](https://api.bintray.com/packages/ysb33r/nanook/vfs/images/download.png) ](https://bintray.com/ysb33r/nanook/vfs/_latestVersion)\r\n\r\nA command-line utility mimicking a number of GNU shell utilities is available.\r\n\r\n## Documentation\r\n\r\n+ See https://github.com/ysb33r/groovy-vfs/wiki for more detailed documentation.\r\n+ Greach2014 presentation on v0.5 - http://www.slideshare.net/ysb33r/groovy-vfs-32889561\r\n\r\n## Credits\r\n\r\nIt is seldom that these kind of libraries happen in isolation. It is therefore prudent \r\nthat I acknowledge the inputs of others in the creation of groovy-vfs\r\n\r\n+ Luke Daley (https://gist.github.com/alkemist/7943781) for helping to use Ratpack as a Mock HTTP Server in unit tests.\r\n+ Will_lp (https://gist.github.com/will-lp/5785180) & Jim White (https://gist.github.com/jimwhite/5784982) \r\noffered great suggestions when I got stuck with the config DSL.\r\n+ Jez Higgins, Rob Fletcher, Giovanni Asproni, Balachandran Sivakumar, Burkhard Kloss & Tim Barker who helped shape the\r\ndesign decision to auto-create intermediates during a move operation.\r\n+ Maarten Boekhold for testing the SMB Provider plugin\r\n+ Everyone from Greach 2014 that provided feedback\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
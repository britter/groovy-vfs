// ============================================================================
// (C) Copyright Schalk W. Cronje 2012 - 2014
//
// This software is licensed under the Apache License 2.0
// See http://www.apache.org/licenses/LICENSE-2.0 for license details
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and limitations under the License.
// ============================================================================

buildscript {
    repositories {
        maven {
            name 'Bintray Asciidoctor repo'
            url  'http://dl.bintray.com/content/aalmiray/asciidoctor'
        }
        jcenter()
    }


    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.0'
    }
}

import org.ysb33r.gradle.bintray.BintrayGenericUpload

apply plugin : 'application'
apply plugin : 'asciidoctor'

group = 'org.ysb33r.groovy'
archivesBaseName = 'cmdline-vfs'
mainClassName = 'org.ysb33r.groovy.vfs.app.Run'
applicationName = 'vfs'
applicationDefaultJvmArgs=["-Dvfs.scriptname=${applicationName}"]
bintrayRepo = 'nanook'

jar {
    manifest {
        attributes 'Implementation-Title': 'VFS Command-line Utility', 'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
    //maven { url 'https://oss.jfrog.org/artifactory/libs-snapshot' }
}   

dependencies {
    compile group: 'org.codehaus.groovy',   name: 'groovy-all', version: '[2.0,2.3]', classifier: 'indy'
    compile 'commons-cli:commons-cli:1.2'
    runtime 'commons-io:commons-io:2.4'
    runtime 'commons-net:commons-net:3.+'
    runtime 'commons-httpclient:commons-httpclient:3.1'
    runtime 'org.slf4j:slf4j-simple:1.7.5'
    runtime 'com.jcraft:jsch:0.1.48'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    compile project(':dsl')
}

test {
    systemProperties TESTFSREADROOT : "${projectDir}/src/test/resources"
    systemProperties TESTFSWRITEROOT : "${buildDir}/tmp/test/cmdline-vfs"
}

asciidoctor {
    asciidoctor {
        sourceDir = new File(projectDir,'/src/asciidoc')
        //sourceDocumentName = srcDoc
        outputDir = new File(buildDir,'docs')
        logDocuments = true
        backend = 'html5'
        options = [
                eruby: 'erubis',
                attributes: [
                        icons: 'font',
                        'source-highlighter': 'prettify',
                        experimental: true,
                        copycss: true,
                        idprefix: '',
                        idseparator: '-'
                ]
        ]

    }

}

distTar {
    extension = 'tgz'
    compression = Compression.GZIP
    from(new File(buildDir,'docs')) {
        into "${applicationName}-${version}/docs"
    }

    dependsOn asciidoctor
}

distZip {
    from(new File(buildDir,'docs')) {
        into "${applicationName}-${version}/docs"
    }

    dependsOn asciidoctor
}

task sourcesZip(type: Zip, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    baseName = applicationName
}


task uploadArchives (type:BintrayGenericUpload ) {
    username    project.properties.bintrayUserName
    apiKey      project.properties.bintrayApiKey
    repoOwner   bintrayUser
    repoName    bintrayRepo
    packageName 'vfs'
    sources distZip.outputs.files
    sources distTar.outputs.files
    sources sourcesZip.outputs.files

    gpgSign true
    gpgPassphrase project.properties.bintrayGpgPassphrase

    dependsOn distZip, distTar, sourcesZip

    onlyIf { !version.endsWith("SNAPSHOT") }
}

// TODO: ISSUE #20 - Generate man pages from asciidocs



